// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Share Workout Screen Should render 1`] = `
<View>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#ffffff",
        "borderRadius": 4,
        "elevation": 4,
        "flexDirection": "row",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 3,
          "width": 0,
        },
        "shadowOpacity": 0.24,
        "shadowRadius": 4,
      }
    }
  >
    <View
      accessibilityLabel="search"
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": undefined,
        }
      }
      accessible={true}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 6,
          "left": 6,
          "right": 6,
          "top": 6,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "alignItems": "center",
              "justifyContent": "center",
              "margin": 6,
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 18,
              "height": 36,
              "width": 36,
            },
            undefined,
            undefined,
          ],
        ]
      }
    >
      <View>
        <Text />
      </View>
    </View>
    <TextInput
      accessibilityRole="search"
      accessibilityTraits="search"
      allowFontScaling={true}
      keyboardAppearance="light"
      onChangeText={[Function]}
      onSubmitEditing={[Function]}
      placeholder="Search for athlete..."
      placeholderTextColor="rgba(0, 0, 0, 0.54)"
      rejectResponderTermination={true}
      returnKeyType="search"
      selectionColor="#6200ee"
      style={
        Array [
          Object {
            "alignSelf": "stretch",
            "flex": 1,
            "fontSize": 18,
            "minWidth": 0,
            "paddingLeft": 8,
            "textAlign": "left",
          },
          Object {
            "color": "#000000",
            "fontFamily": "System",
            "fontWeight": "400",
          },
          undefined,
        ]
      }
      underlineColorAndroid="transparent"
      value=""
    />
    <View
      accessibilityLabel="clear"
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 6,
          "left": 6,
          "right": 6,
          "top": 6,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "alignItems": "center",
              "justifyContent": "center",
              "margin": 6,
              "overflow": "hidden",
            },
            Object {
              "borderRadius": 18,
              "height": 36,
              "width": 36,
            },
            Object {
              "opacity": 0.32,
            },
            undefined,
          ],
        ]
      }
    >
      <View>
        <Text />
      </View>
    </View>
  </View>
  <RCTScrollView
    data=""
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    keyboardShouldPersistTaps="handled"
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
  <View>
    <Text
      numberOfLines={1}
      style={
        Array [
          Object {
            "color": "#000000",
            "fontFamily": "System",
            "fontWeight": "400",
          },
          Object {
            "textAlign": "left",
          },
          Array [
            Object {
              "paddingHorizontal": 16,
              "paddingVertical": 13,
            },
            Object {
              "color": "rgba(0, 0, 0, 0.54)",
              "fontFamily": "System",
              "fontWeight": "500",
            },
            Object {
              "fontFamily": "lato-bold",
              "fontSize": 16,
            },
          ],
        ]
      }
    >
      My Athletes
    </Text>
    <RCTScrollView
      data={null}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
</View>
`;
